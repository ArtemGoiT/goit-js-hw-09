{"version":3,"file":"commonHelpers2.js","sources":["../src/js/2-form.js"],"sourcesContent":["// Получаем форму и ключ для локального хранилища\nconst form = document.querySelector('.feedback-form');\nconst localStorageKey = 'feedback-form-state';\nconst formObject = {}; // Создаём пустой объект для хранения данных формы\n\n// Функция для загрузки данных из локального хранилища\nfunction loadFormData() {\n  // Получаем данные из локального хранилища по ключу\n  const storedData = localStorage.getItem(localStorageKey);\n  if (storedData) {\n    // Проверяем, есть ли сохранённые данные\n    const parsedData = JSON.parse(storedData); // Преобразуем строку JSON в объект JavaScript\n    if (parsedData) {\n      // Если есть сохранённые данные, заполняем поля формы этими данными\n      form.elements.email.value = parsedData.email;\n      form.elements.message.value = parsedData.message;\n      // Обновляем объект данных формы, чтобы он соответствовал сохранённым данным\n      Object.assign(formObject, parsedData);\n    }\n  }\n}\n\n// Функция для сохранения данных формы в локальном хранилище\nfunction saveFormData() {\n  const formData = new FormData(form); // Получаем данные из всех полей формы\n  // Проходим по каждому полю и сохраняем его значение в объект формы\n  formData.forEach((value, key) => {\n    formObject[key] = value.trim(); // Обрезаем пробелы вокруг значений и сохраняем их в объект формы\n  });\n  // Сохраняем объект формы в локальном хранилище после преобразования его в строку JSON\n  localStorage.setItem(localStorageKey, JSON.stringify(formObject));\n}\n\n// Функция для сброса данных формы и удаления их из локального хранилища\nfunction resetForm() {\n  form.reset(); // Сбрасываем значения полей формы\n  localStorage.removeItem(localStorageKey); // Удаляем данные из локального хранилища по ключу\n}\n\n// Слушатель события ввода данных в форму\nform.addEventListener('input', () => {\n  const formData = new FormData(form); // Получаем данные из всех полей формы\n  // Обновляем объект данных формы при каждом вводе новых данных\n  formData.forEach((value, key) => {\n    formObject[key] = value.trim(); // Обрезаем пробелы вокруг значений и сохраняем их в объект формы\n  });\n  // Сохраняем обновлённые данные формы в локальном хранилище\n  localStorage.setItem(localStorageKey, JSON.stringify(formObject));\n});\n\n// Слушатель события отправки формы\nform.addEventListener('submit', e => {\n  e.preventDefault(); // Отменяем стандартное поведение отправки формы\n\n  const email = e.currentTarget.elements.email.value; // Получаем значение поля email\n  const message = e.currentTarget.elements.message.value; // Получаем значение поля message\n\n  // Проверяем, заполнены ли все поля формы\n  if (email === '' || message === '') {\n    alert('All form fields must be filled in'); // Выводим сообщение об ошибке, если поля не заполнены\n  } else {\n    // Если все поля заполнены, выводим данные формы в консоль и сбрасываем форму\n    console.log(formObject);\n    resetForm(); // Сбрасываем данные формы\n  }\n});\n\n// Загружаем данные формы при загрузке страницы\nloadFormData();\n// Здесь вызываем функцию loadFormData() для загрузки данных при загрузке страницы\n"],"names":["form","localStorageKey","formObject","loadFormData","storedData","parsedData","resetForm","value","key","e","email","message"],"mappings":"oDACA,MAAMA,EAAO,SAAS,cAAc,gBAAgB,EAC9CC,EAAkB,sBAClBC,EAAa,CAAA,EAGnB,SAASC,GAAe,CAEtB,MAAMC,EAAa,aAAa,QAAQH,CAAe,EACvD,GAAIG,EAAY,CAEd,MAAMC,EAAa,KAAK,MAAMD,CAAU,EACpCC,IAEFL,EAAK,SAAS,MAAM,MAAQK,EAAW,MACvCL,EAAK,SAAS,QAAQ,MAAQK,EAAW,QAEzC,OAAO,OAAOH,EAAYG,CAAU,EAEvC,CACH,CAcA,SAASC,GAAY,CACnBN,EAAK,MAAK,EACV,aAAa,WAAWC,CAAe,CACzC,CAGAD,EAAK,iBAAiB,QAAS,IAAM,CAClB,IAAI,SAASA,CAAI,EAEzB,QAAQ,CAACO,EAAOC,IAAQ,CAC/BN,EAAWM,CAAG,EAAID,EAAM,KAAI,CAChC,CAAG,EAED,aAAa,QAAQN,EAAiB,KAAK,UAAUC,CAAU,CAAC,CAClE,CAAC,EAGDF,EAAK,iBAAiB,SAAUS,GAAK,CACnCA,EAAE,eAAc,EAEhB,MAAMC,EAAQD,EAAE,cAAc,SAAS,MAAM,MACvCE,EAAUF,EAAE,cAAc,SAAS,QAAQ,MAG7CC,IAAU,IAAMC,IAAY,GAC9B,MAAM,mCAAmC,GAGzC,QAAQ,IAAIT,CAAU,EACtBI,IAEJ,CAAC,EAGDH"}